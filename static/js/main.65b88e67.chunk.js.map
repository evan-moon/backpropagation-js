{"version":3,"sources":["config/index.ts","utils/index.ts","reducers/index.ts","actions/actionTypes.ts","store.ts","actions/index.ts","lib/math.ts","lib/neuron.ts","lib/layer.ts","lib/network.ts","lib/bootstrapper.ts","components/Network/index.tsx","components/Loss/index.tsx","components/Output/index.tsx","components/ControlPanel/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["networkOptions","chartOptions","getTargets","nodePerLayer","targets","i","push","Math","random","initialState","nodeGraphicData","errorDataset","outputDataset","learningResult","learningRate","learningLimit","layerCount","inputs","totalLoss","rootReducer","state","arguments","length","undefined","action","type","Object","objectSpread2","payload","rate","limit","count","data","result","loss","logger","createLogger","createStore","reducers","applyMiddleware","setLearningRate","setLearningLimit","setNodePerLayer","setLayerCount","sigmoid","x","exp","MeanSquaredError","values","Error","forEach","t","pow","MeanSquaredErrorPrimes","map","Neuron","id","weights","classCallCheck","this","variableLength","notActivatedResult","activatedResult","activatedResultPrime","weightPrimes","toConsumableArray","createClass","key","value","concat","m","n","v","multiplation","lossPrime","_this","weight","index","p","Layer","prevLayer","nextLayer","neurons","neuron","setInputs","layer","calc","results","getResults","getCalcedResult","forward","primes","getWeightPrimes","lossPrimes","reduce","a","b","updateWeights","Network","layers","firstLayer","lastLayer","totalLossPrimes","output","nodes","links","j","newWeights","k","neuronId","pushNeuron","layerIndex","setPrevLayer","setNextLayer","l","li","getNeurons","ni","name","y","nn","source","target","getForwardLoss","_this2","reversed","reverse","losses","getLosses","bootstrapper","_ref","store","dispatch","network","createNodes","networkDataset","getNetworkGraphicData","forwardPropagation","backPropagation","getTotalLoss","setErrorDataset","setOutputDataset","NetworkView","selector","wrapper","document","getElementById","_this$props","props","innerHTML","console","error","height","width","offsetWidth","svg","d3","append","attr","simulation","force","d","strength","g","link","style","selectAll","enter","node","label","text","sourceNode","targetNode","on","init","react_default","createElement","React","Component","LossView","chart","c3","bindto","columns","size","axis","tick","format","number","Number","round","point","show","color","pattern","load","log","OutputView","outputs","nodeCountOptions","layerCountOptions","ControlPanel","parseInt","parseFloat","event","currentTarget","setState","_this$state","Form","className","Row","Group","as","Col","Label","Control","defaultValue","onChange","onChangeNodePerLayer","bind","num","onChangeLayerCount","onChangeLearningRate","onChangeLearningLimit","Button","variant","onClick","onClickActivate","connect","toString","bindActionCreators","App","networkRef","createRef","errorChartRef","outputChartRef","storeState","printResult","current","Container","fluid","noGutters","xs","src_components_ControlPanel","components_Network","ref","xl","Loss","Output","Boolean","window","location","hostname","match","getState","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65b88e67.chunk.js","sourcesContent":["import { NetworkOptions, ChartOptions } from '../types';\n\nexport const networkOptions: NetworkOptions = {\n  layerCount: 5,\n  nodePerLayer: 3,\n  targets: [0.5, 0.3, 1],\n  learningRate: 0.2,\n  learningLimit: 500,\n};\n\nexport const chartOptions: ChartOptions = {\n  height: 250,\n};\n","export function getTargets (nodePerLayer: number): number[] {\n  const targets: number[] = [];\n  const min = 0.1;\n  const max = 1;\n  for (let i = 0; i < nodePerLayer; i++) {\n    targets.push(Math.random() * (max - min) + min);\n  }\n  return targets;\n}","import { networkOptions } from '../config';\nimport * as types from '../actions/actionTypes';\nimport { ActionCreator } from '../actions';\nimport { getTargets } from '../utils';\n\nconst { learningRate, learningLimit, nodePerLayer, layerCount } = networkOptions;\n\nexport interface AppState {\n  nodeGraphicData: any;\n  errorDataset: any;\n  outputDataset: any;\n  learningResult: any;\n  learningRate: number;\n  learningLimit: number;\n  nodePerLayer: number;\n  layerCount: number;\n  inputs: number[];\n  targets: number[];\n  totalLoss: number;\n};\n\nconst initialState: AppState = {\n  nodeGraphicData: null,\n  errorDataset: null,\n  outputDataset: null,\n  learningResult: null,\n  learningRate,\n  learningLimit,\n  nodePerLayer,\n  layerCount,\n  inputs: [],\n  targets: getTargets(nodePerLayer),\n  totalLoss: -1,\n};\n\nconst rootReducer = (state: AppState = initialState, action: ActionCreator): AppState => {\n  switch (action.type) {\n    case types.SET_LEARNING_RATE:\n      return {\n        ...state,\n        learningRate: action.payload.rate,\n      };\n    case types.SET_LEARNING_LIMIT:\n      return {\n        ...state,\n        learningLimit: action.payload.limit,\n      };\n    case types.SET_NODE_PER_LAYER:\n      return {\n        ...state,\n        nodePerLayer: action.payload.count,\n      };\n    case types.SET_LAYER_COUNT:\n      return {\n        ...state,\n        layerCount: action.payload.count,\n      };\n    case types.SET_INPUTS:\n      return {\n        ...state,\n        inputs: action.payload.inputs,\n      };\n    case types.SET_NODE_GRAPHIC_DATA:\n      return {\n        ...state,\n        nodeGraphicData: action.payload.data,\n      };\n    case types.DESTROY_NODE_GRAPHIC_DATA:\n      return {\n        ...state,\n        nodeGraphicData: null,\n      };\n    case types.SET_ERROR_DATASET:\n      return {\n        ...state,\n        errorDataset: action.payload.data,\n      };\n    case types.DESTROY_ERROR_DATASET:\n      return {\n        ...state,\n        errorDataset: null,\n      };\n    case types.SET_OUTPUT_DATASET:\n      return {\n        ...state,\n        outputDataset: action.payload.data,\n      };\n    case types.DESTROY_OUTPUT_DATASET:\n      return {\n        ...state,\n        outputDataset: null,\n      };\n    case types.SET_LEARNING_RESULT:\n      return {\n        ...state,\n        learningResult: action.payload.result,\n      };\n    case types.DESTROY_LEARNING_RESULT:\n      return {\n        ...state,\n        learningResult: null,\n      };\n    case types.SET_TOTAL_LOSS:\n      return {\n        ...state,\n        totalLoss: action.payload.loss,\n      };\n    case types.DESTROY_TOTAL_LOSS:\n      return {\n        ...state,\n        totalLoss: -1,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","export const SET_LEARNING_RATE = 'SET_LEARNING_RATE';\nexport const SET_LEARNING_LIMIT = 'SET_LEARNING_LIMIT';\nexport const SET_NODE_PER_LAYER = 'SET_NODE_PER_LAYER';\nexport const SET_LAYER_COUNT = 'SET_LAYER_COUNT';\nexport const SET_INPUTS = 'SET_INPUTS';\n\nexport const SET_NODE_GRAPHIC_DATA = 'SET_NODE_GRAPHIC_DATA';\nexport const DESTROY_NODE_GRAPHIC_DATA = 'DESTROY_NODE_GRAPHIC_DATA';\n\nexport const SET_ERROR_DATASET = 'SET_ERROR_DATASET';\nexport const DESTROY_ERROR_DATASET = 'DESTROY_ERROR_DATASET';\nexport const SET_OUTPUT_DATASET = 'SET_OUTPUT_DATASET';\nexport const DESTROY_OUTPUT_DATASET = 'DESTROY_OUTPUT_DATASET';\n\nexport const SET_LEARNING_RESULT = 'SET_LEARNING_RESULT';\nexport const DESTROY_LEARNING_RESULT = 'DESTROY_LEARNING_RESULT';\nexport const SET_TOTAL_LOSS = 'SET_TOTAL_LOSS';\nexport const DESTROY_TOTAL_LOSS = 'DESTROY_TOTAL_LOSS';\n","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport reducers from './reducers';\n\nconst logger = createLogger();\n\nexport default createStore(reducers, applyMiddleware(logger));","import * as types from './actionTypes';\nimport { networkOptions } from '../config';\n\nconst { learningRate, learningLimit, nodePerLayer, layerCount } = networkOptions;\n\nexport interface ActionCreator {\n  type: string;\n  payload: any;\n  error?: boolean;\n};\n\nexport const setLearningRate = (rate: number = learningRate): ActionCreator => {\n  return {\n    type: types.SET_LEARNING_RATE,\n    payload: { rate },\n  };\n};\n\nexport const setLearningLimit = (limit: number = learningLimit): ActionCreator => {\n  return {\n    type: types.SET_LEARNING_LIMIT,\n    payload: { limit },\n  };\n};\n\nexport const setNodePerLayer = (count: number = nodePerLayer): ActionCreator => {\n  return {\n    type: types.SET_NODE_PER_LAYER,\n    payload: { count },\n  };\n};\n\nexport const setLayerCount = (count: number = layerCount): ActionCreator => {\n  return {\n    type: types.SET_LAYER_COUNT,\n    payload: { count },\n  };\n};\n\nexport const setInputs = (inputs: number[]): ActionCreator => {\n  return {\n    type: types.SET_INPUTS,\n    payload: { inputs },\n  };\n};\n\nexport const setNodeGraphicData = (data: { nodes: any[], links: any[] }): ActionCreator => {\n  return {\n    type: types.SET_NODE_GRAPHIC_DATA,\n    payload: { data },\n  };\n};\n\nexport const destroyNodeGraphicData = (): ActionCreator => {\n  return {\n    type: types.DESTROY_NODE_GRAPHIC_DATA,\n    payload: {},\n  };\n}\n\nexport const setErrorDataset = (data: any): ActionCreator => {\n  return {\n    type: types.SET_ERROR_DATASET,\n    payload: { data },\n  };\n};\n\nexport const destroyErrorDataset = (): ActionCreator => {\n  return {\n    type: types.DESTROY_ERROR_DATASET,\n    payload: {},\n  };\n}\n\nexport const setOutputDataset = (data: any): ActionCreator => {\n  return {\n    type: types.SET_OUTPUT_DATASET,\n    payload: { data },\n  };\n};\n\nexport const destroyOutputDataset = (): ActionCreator => {\n  return {\n    type: types.DESTROY_OUTPUT_DATASET,\n    payload: {},\n  };\n};\n\nexport const setLearningResult = (result: any): ActionCreator => {\n  return {\n    type: types.SET_LEARNING_RESULT,\n    payload: { result },\n  };\n};\n\nexport const destroyLearningResult = (): ActionCreator => {\n  return {\n    type: types.DESTROY_LEARNING_RESULT,\n    payload: {},\n  };\n};\n\nexport const setTotalLoss = (loss: number): ActionCreator => {\n  return {\n    type: types.SET_TOTAL_LOSS,\n    payload: { loss },\n  };\n};\n\nexport const destroyTotalLoss = (): ActionCreator => {\n  return {\n    type: types.DESTROY_TOTAL_LOSS,\n    payload: {},\n  };\n};","export function sigmoid (x: number, deff = false): number {\n  if (deff) {\n    return sigmoid(x) * (1 - sigmoid(x));\n  } else {\n    return 1 / (1 + Math.exp(-x));\n  }\n}\n\nexport function MeanSquaredError (targets: number[], values: number[]): number {\n  if (targets.length !== values.length) {\n    throw new Error('target and value must have same length!');\n  }\n\n  let result: number = 0;\n  targets.forEach((t: number, i: number) => {\n    result += ((t - values[i]) ** 2);\n  });\n  result *= (1 / targets.length);\n\n  return result;\n}\n\nexport function MeanSquaredErrorPrimes (targets: number[], values: number[]): number[] {\n  return targets.map((t: number, i: number) => -(t - values[i]));\n}\n\n/**\n * @function multiplation\n * @param { number[] } m\n * @param { number[] } n\n * @desc m은 행벡터로 취급하고 n은 transpost하여 열벡터로 취급하여 행렬곱 진행\n * [[x1, x2]] x [[w1], [w2]] = x1w1 + x2w2\n */\nexport function multiplation (m: number[], n: number[]) {\n  if (m.length !== n.length) {\n    throw new Error(`m.length = ${m.length}, n.length = ${n.length}. Can't multiplation! They must have same length`);\n  }\n  let result: number = 0;\n  m.forEach((v, i) => {\n    result += (v * n[i]);\n  });\n  return result;\n}\n","import { sigmoid, multiplation } from './math';\n\n/**\n * @class Neuron\n * @member id\n * @member inputs\n * @member weights\n * @member variableLength\n * @member notActivatedResult input, weight의 계산 결과 값\n * @member activatedResult notActivateResult가 Activation Function을 통과한 값\n * @member activatedResultPrime Activation Function / 계산 결과 값에 대한 미분 값\n * @member weightPrimes 각 에러 / activateResult에 대한 미분 값. FrontPropagation 계산 당시에는 모른다\n */\nexport class Neuron {\n  public id: string = 'anonymous-neuron';\n  private inputs: number[] = [];\n  private weights: number[] = [];\n  private variableLength: number;\n  private notActivatedResult: number;\n  private activatedResult: number;\n  private activatedResultPrime: number;\n  private weightPrimes: number[];\n\n  constructor (id: string, weights: number[]) {\n    this.id = id;\n    this.weights = [...weights];\n    this.variableLength = weights.length;\n    this.notActivatedResult = 0;\n    this.activatedResult = 0;\n    this.activatedResultPrime = 0;\n    this.weightPrimes = [];\n  }\n\n  public setInputs (inputs: number[]) {\n    if (inputs.length !== this.variableLength) {\n      throw new Error(`Error in ${this.id} :: ${inputs.length} is must be ${this.variableLength}`);\n    }\n    this.inputs = [...inputs];\n  }\n\n  public calc () {\n    this.notActivatedResult = multiplation(this.inputs, this.weights);\n    this.activatedResult = sigmoid(this.notActivatedResult);\n    this.activatedResultPrime = sigmoid(this.notActivatedResult, true);\n  }\n\n  public getCalcedResult () {\n    return this.activatedResult;\n  }\n\n  public getWeightPrimes () {\n    return this.weightPrimes;\n  }\n\n  updateWeights (lossPrime: number, learningRate: number) {\n    this.weights = this.weights.map((weight, index) => {\n      const p = lossPrime * this.activatedResultPrime;\n      const loss = p * this.inputs[index];\n      this.weightPrimes[index] = p * weight;\n      return weight - (learningRate * loss);\n    });\n  }\n}\n","import { Neuron } from './neuron';\nimport { MeanSquaredError, MeanSquaredErrorPrimes } from './math';\n\nexport class Layer {\n  public id: string = '';\n  public prevLayer: Layer|null = null;\n  public nextLayer: Layer|null = null;\n  public length: number = 0;\n  private neurons: Neuron[] = [];\n\n  constructor (id: string) {\n    this.id = id;\n  }\n\n  public pushNeuron (neuron: Neuron) {\n    this.neurons.push(neuron);\n    this.length = this.neurons.length;\n  }\n\n  public setInputs (inputs: number[]) {\n    this.neurons.forEach(neuron => neuron.setInputs(inputs));\n  }\n\n  public setPrevLayer (layer: Layer) {\n    this.prevLayer = layer;\n  }\n\n  public setNextLayer (layer: Layer) {\n    this.nextLayer = layer;\n  }\n\n  public calc () {\n    this.neurons.forEach(neuron => {\n      neuron.calc();\n    });\n\n    const results = this.getResults();\n    if (this.nextLayer) {\n      this.nextLayer.setInputs(results);\n    }\n  }\n\n  public getNeurons (): Neuron[] {\n    return this.neurons;\n  }\n\n  public getResults () {\n    return this.neurons.map(neurons => neurons.getCalcedResult());\n  }\n\n  public getForwardLoss (targets: number[]) {\n    const results = this.getResults();\n    return {\n      forward: MeanSquaredError(targets, results),\n      primes: MeanSquaredErrorPrimes(targets, results),\n    };\n  }\n\n  public getLosses () {\n    return this.neurons.map((n: Neuron) => {\n      return n.getWeightPrimes();\n    });\n  }\n\n  public updateWeights (lossPrimes: any[], learningRate: number) {\n    if (this.nextLayer) {\n      // 마지막 레이어가 아니라면 전 레이어의 에러를 모두 더해야한다.\n      this.neurons.forEach((neuron: Neuron, index:number) => {\n        const lossPrime = lossPrimes.reduce((a: number, b: number[]) => a + b[index], 0);\n        neuron.updateWeights(lossPrime, learningRate);\n      });\n    } else {\n      // 아웃풋 레이어라면 lossPrimes 중 해당 뉴런의 인덱스 해당하는 로스만 사용해야한다.\n      this.neurons.forEach((neuron: Neuron, index: number) => neuron.updateWeights(lossPrimes[index], learningRate));\n    }\n  }\n}\n","import { Neuron } from './neuron';\nimport { Layer } from './layer';\n\nexport class Network {\n  private layers: Layer[] = [];\n  private firstLayer: Layer|null = null;\n  private lastLayer: Layer|null = null;\n  private targets: number[];\n  private inputs: number[];\n  private totalLoss: number = -1;\n  private totalLossPrimes: number[] = [];\n  private output: number[] = [];\n  private learningRate: number = 0;\n\n  private nodes: any[] = [];\n  private links: any[] = [];\n\n  constructor (targets: number[], inputs: number[]) {\n    if (targets.length !== inputs.length) {\n      throw new Error('targets must have same length with inputs');\n    }\n    this.targets = targets;\n    this.inputs = inputs;\n  }\n\n  setLearningRate (learningRate: number) {\n    this.learningRate = learningRate;\n  }\n\n  createNodes (layerCount: number, nodePerLayer: number) {\n    for (let i = 0; i < layerCount; i++) {\n      const layer: Layer = new Layer(`layer-${i}`);\n      for (let j = 0; j < nodePerLayer; j++) {\n        const newWeights = [];\n        for (let k = 0; k < this.inputs.length; k++) {\n          newWeights.push(Math.random());\n        }\n\n        const neuronId = `neuron-[${i}][${j}]`;\n        const neuron = new Neuron(neuronId, newWeights);\n        layer.pushNeuron(neuron);\n      }\n\n      if (i === 0) {\n        this.firstLayer = layer;\n        this.firstLayer.setInputs(this.inputs);\n      }\n      if (i === layerCount - 1) {\n        this.lastLayer = layer;\n      }\n\n      this.layers.push(layer);\n    }\n\n    this.layers.forEach((layer, layerIndex) => {\n      const prevLayer = this.layers[layerIndex - 1];\n      const nextLayer = this.layers[layerIndex + 1];\n      if (prevLayer) {\n        layer.setPrevLayer(prevLayer);\n      }\n      if (nextLayer) {\n        layer.setNextLayer(nextLayer);\n      }\n    });\n\n    // Create Nodes and Links\n    // @TODO 시간복잡도 n^3이므로 개선해야함\n    this.layers.forEach((l: Layer, li: number) => {\n      l.getNeurons().forEach((n: Neuron, ni: number) => {\n        this.nodes.push({ id: n.id, name: `[${li}][${ni}]`, x: li, y: ni });\n        if (l.nextLayer) {\n          l.nextLayer.getNeurons().forEach((nn: Neuron) => {\n            this.links.push({ source: n.id, target: nn.id, value: 1 });\n          });\n        }\n      });\n    });\n  }\n\n  getNetworkGraphicData () {\n    return {\n      nodes: this.nodes,\n      links: this.links,\n    };\n  }\n\n  forwardPropagation () {\n    this.layers.forEach((layer: Layer) => {\n      layer.calc();\n    });\n    const loss = this.lastLayer!.getForwardLoss(this.targets);\n    this.output = this.lastLayer!.getResults();\n    this.totalLoss = loss.forward;\n    this.totalLossPrimes = loss.primes;\n  }\n\n  backPropagation () {\n    const reversed = [...this.layers].reverse();\n    const learningRate = this.learningRate;\n    reversed.forEach(layer => {\n      if (layer.id === this.lastLayer!.id) {\n        layer.updateWeights(this.totalLossPrimes, learningRate);\n      } else {\n        // 순서가 거꾸로 되어있으니까 nextLayer가 계산이 먼저 끝나있다.\n        const losses = layer.nextLayer!.getLosses();\n        layer.updateWeights(losses, learningRate);\n      }\n    });\n  }\n\n  getResults () {\n    return this.lastLayer!.getResults();\n  }\n\n  getTotalLoss () {\n    return this.totalLoss;\n  }\n}\n","import store from '../store';\nimport {\n  setInputs,\n  setNodeGraphicData,\n  destroyNodeGraphicData,\n  setErrorDataset,\n  destroyErrorDataset,\n  setOutputDataset,\n  destroyOutputDataset,\n  setLearningResult,\n  destroyLearningResult,\n  setTotalLoss,\n  destroyTotalLoss\n} from '../actions';\nimport { Network } from './network';\n\n\ninterface BootstrapProps {\n  targets: number[];\n  layerCount: number;\n  nodePerLayer: number;\n  learningRate: number;\n  learningLimit: number;\n};\n\nconst bootstrapper = ({ targets, layerCount, nodePerLayer, learningRate, learningLimit }: BootstrapProps) => {\n  store.dispatch(destroyNodeGraphicData());\n  store.dispatch(destroyErrorDataset());\n  store.dispatch(destroyOutputDataset());\n  store.dispatch(destroyLearningResult());\n  store.dispatch(destroyTotalLoss());\n\n  const inputs = targets.map(target => Math.random() + target);\n  store.dispatch(setInputs(inputs));\n\n  const network = new Network(targets, inputs);\n  network.createNodes(layerCount, nodePerLayer);\n  network.setLearningRate(learningRate);\n\n  const networkDataset = network.getNetworkGraphicData();\n  store.dispatch(setNodeGraphicData(networkDataset));\n\n  const errorDataset: number[] = [];\n  const outputDataset: number[][] = targets.map(() => {\n    return [];\n  });\n\n  for (let i = 0; i < learningLimit; i++) {\n    network.forwardPropagation();\n    network.backPropagation();\n  \n    errorDataset.push(network.getTotalLoss());\n    network.getResults().forEach((output: number, index: number) => {\n      outputDataset[index].push(output);\n    });\n  }\n\n  store.dispatch(setErrorDataset(errorDataset));\n  store.dispatch(setOutputDataset(outputDataset));\n  store.dispatch(setLearningResult(network.getResults()));\n  store.dispatch(setTotalLoss(network.getTotalLoss()));\n};\n\nexport default bootstrapper;","import React from 'react';\nimport { GraphNode, GraphLink } from '../../types/index';\nimport { chartOptions } from '../../config/index';\nimport * as d3 from \"d3\";\n\ntype Props = {\n  nodes: GraphNode[];\n  links: GraphLink[];\n}\n\nclass NetworkView extends React.Component<Props> {\n  private selector: string = 'networkView';\n\n  init () {\n    const wrapper = document.getElementById(this.selector);\n    const { nodes, links } = this.props;\n\n    if (wrapper) {\n      wrapper.innerHTML = '';\n    }\n    else {\n      console.error(`There is no DOM element #${this.selector}`);\n    }\n\n    let { height } = chartOptions;\n    const width = document.getElementById(this.selector)!.offsetWidth;\n    height += 200;\n\n    const svg = d3.select(`#${this.selector}`)\n      .append('svg:svg')\n      .attr('width', width)\n      .attr('height', height);\n    const simulation = d3.forceSimulation()\n      .force('link', d3.forceLink().id((d: any) => d.id))\n      .force('charge', d3.forceManyBody().strength(-400))\n      .force('center', d3.forceCenter(width / 2, height / 2))\n      .force('x', d3.forceX())\n      .force('y', d3.forceY());\n    const g = svg.append('g');\n    const link = g.append('g')\n      .style('stroke', '#ffffff')\n      .selectAll('line')\n      .data(links)\n      .enter()\n      .append('line');\n    const node = g.append('g')\n      .attr('class', 'nodes')\n      .selectAll('circle')\n      .data(nodes)\n      .enter()\n      .append('circle');\n    const label = g.append('g')\n      .attr('class', 'labels')\n      .selectAll('text')\n      .data(nodes)\n      .enter()\n      .append('text')\n      .attr('class', 'label')\n      .text((d: GraphNode) => d.name);\n\n    links.forEach(link => {\n      nodes.forEach(n => {\n        if (n.id === link.source) {\n          link.sourceNode = n;\n        } else if (n.id === link.target) {\n          link.targetNode = n;\n        }\n      });\n    });\n\n    simulation.nodes(nodes).on('tick', () => {\n      link.attr('x1', d => d.sourceNode.x)\n        .attr('y1', d => d.sourceNode.y)\n        .attr('x2', d => d.targetNode.x)\n        .attr('y2', d => d.targetNode.y);\n\n      node.attr('r', 12)\n        .style('fill', 'transparent')\n        .style('stroke', '#ffffff')\n        .style('stroke-width', '1px')\n        .attr('cx', d => d.x)\n        .attr('cy', d => d.y);\n\n      label.attr('x', d => d.x - 15)\n        .attr('y', d => d.y - 17)\n        .style('font-size', '12px')\n        .style('fill', '#ffffff');\n    });\n  }\n\n  componentDidMount () {\n    this.init();\n  }\n\n  render () {\n    return (\n      <div id={this.selector}></div>\n    )\n  }\n}\n\nexport default NetworkView;\n","import React from 'react';\nimport * as c3 from \"c3\";\nimport {chartOptions, networkOptions} from \"../../config\";\n\ntype Props = {\n  losses: number[];\n}\n\nclass LossView extends React.Component<Props> {\n  private label: string = 'Loss';\n  private selector: string = 'lossView';\n  private chart: any = null;\n\n  init () {\n    const wrapper = document.getElementById(this.selector);\n    const { losses } = this.props;\n\n    if (wrapper) {\n      wrapper.innerHTML = '';\n    }\n    else {\n      console.error(`There is no DOM element #${this.selector}`);\n    }\n\n    this.chart = c3.generate({\n      bindto: `#${this.selector}`,\n      data: {\n        columns: [],\n      },\n      size: {\n        height: chartOptions.height,\n      },\n      axis: {\n        x: {\n          type: 'indexed',\n          tick: {\n            count: networkOptions.learningLimit / 50,\n            format: function (x) {\n              const number = Number(x);\n              return Math.round(number);\n            },\n          },\n        },\n      },\n      point: {\n        show: false,\n      },\n      color: {\n        pattern: ['#ffffff']\n      }\n    });\n\n    const columns: any[] = [\n      [this.label, ...losses]\n    ];\n    this.chart.load({ columns });\n  }\n\n  componentDidMount () {\n    console.log('loss view');\n    this.init();\n  }\n\n  render () {\n    return (\n      <div id={this.selector}></div>\n    )\n  }\n}\n\nexport default LossView;\n","import React from 'react';\nimport * as c3 from \"c3\";\nimport {chartOptions, networkOptions} from \"../../config/index\";\n\ntype Props = {\n  outputs: number[][];\n}\n\nclass OutputView extends React.Component<Props> {\n  private label: string = 'Output';\n  private selector: string = 'outputView';\n  private chart: any = null;\n\n  init () {\n    const wrapper = document.getElementById(this.selector);\n    const { outputs } = this.props;\n\n    if (wrapper) {\n      wrapper.innerHTML = '';\n    }\n    else {\n      console.error(`There is no DOM element #${this.selector}`);\n    }\n\n    this.chart = c3.generate({\n      bindto: `#${this.selector}`,\n      data: {\n        columns: [],\n      },\n      size: {\n        height: chartOptions.height,\n      },\n      axis: {\n        x: {\n          type: 'indexed',\n          tick: {\n            count: networkOptions.learningLimit / 50,\n            format: function (x) {\n              const number = Number(x);\n              return Math.round(number);\n            },\n          },\n        },\n      },\n      point: {\n        show: false,\n      },\n      color: {\n        pattern: ['#48cfad', '#7986cb', '#e8eaf6', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5']\n      }\n    });\n\n    const columns: any[] = outputs.map((data: number[], index: number) => {\n      return [`${this.label}${index}`, ...data];\n    });\n    this.chart.load({ columns });\n  }\n\n  componentDidMount () {\n    this.init();\n  }\n\n  render () {\n    return (\n      <div id={this.selector}></div>\n    )\n  }\n}\n\nexport default OutputView;\n","import './index.css';\nimport React, { ChangeEvent } from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { AppState } from '../../reducers';\nimport { Form, Col, Button } from 'react-bootstrap';\nimport bootstrapper from '../../lib/bootstrapper';\nimport { getTargets } from '../../utils';\n\n// 나중에 Container로 분리할 것\nimport { setLearningLimit, setNodePerLayer, setLearningRate, setLayerCount } from '../../actions';\n\nconst mapStateToProps = (state: AppState) => {\n  const { learningRate, learningLimit, nodePerLayer, layerCount } = state;\n  return {\n    learningRate: learningRate.toString(),\n    learningLimit: learningLimit.toString(),\n    nodePerLayer: nodePerLayer.toString(),\n    layerCount: layerCount.toString(),\n  };\n};\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators({\n    setNodePerLayer,\n    setLayerCount,\n    setLearningRate,\n    setLearningLimit,\n  }, dispatch);\n};\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\ntype State = {\n  nodePerLayer: number;\n  layerCount: number;\n  learningRate: number;\n  learningLimit: number;\n};\n\nconst nodeCountOptions = [1, 2, 3, 4, 5];\nconst layerCountOptions = [1, 2, 3, 4, 5];\n\nclass ControlPanel extends React.Component<Props, State> {\n  state = {\n    nodePerLayer: parseInt(this.props.nodePerLayer),\n    layerCount: parseInt(this.props.layerCount),\n    learningRate: parseFloat(this.props.learningRate),\n    learningLimit: parseFloat(this.props.learningLimit),\n  };\n\n  onChangeNodePerLayer (event: ChangeEvent<HTMLSelectElement>) {\n    const value: number = parseInt((event.currentTarget as any).value);\n    this.setState({ ...this.state, nodePerLayer: value });\n  }\n\n  onChangeLayerCount (event: ChangeEvent<HTMLSelectElement>) {\n    const value: number = parseInt((event.currentTarget as any).value);\n    this.setState({ ...this.state, layerCount: value });\n  }\n\n  onChangeLearningRate (event: ChangeEvent<HTMLInputElement>) {\n    const value: number = parseFloat((event.currentTarget as any).value);\n    this.setState({ ...this.state, learningRate: value });\n  }\n\n  onChangeLearningLimit (event: ChangeEvent<HTMLInputElement>) {\n    const value: number = parseFloat((event.currentTarget as any).value);\n    this.setState({ ...this.state, learningLimit: value });\n  }\n\n  onClickActivate () {\n    const { nodePerLayer, layerCount, learningRate, learningLimit } = this.state;\n    this.props.setNodePerLayer(nodePerLayer);\n    this.props.setLayerCount(layerCount);\n    this.props.setLearningRate(learningRate);\n    this.props.setLearningLimit(learningLimit);\n\n    const targets = getTargets(nodePerLayer);\n    bootstrapper({ targets, layerCount, nodePerLayer, learningRate, learningLimit });\n  }\n\n  render () {\n    return (\n      <Form className=\"control-panel\">\n        <Form.Row>\n          <Form.Group as={Col}>\n            <Form.Label>Node per Layer</Form.Label>\n            <Form.Control\n              as=\"select\"\n              defaultValue={this.props.nodePerLayer}\n              onChange={this.onChangeNodePerLayer.bind(this)}>\n              {nodeCountOptions.map(num => <option value={num} key={num}>{num}</option>)}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group as={Col}>\n            <Form.Label>Layer Count</Form.Label>\n            <Form.Control\n              as=\"select\"\n              defaultValue={this.props.layerCount}\n              onChange={this.onChangeLayerCount.bind(this)}>\n              {layerCountOptions.map(num => <option value={num} key={num}>{num}</option>)}\n            </Form.Control>\n          </Form.Group>\n          <Form.Group as={Col}>\n            <Form.Label>Learning Rate</Form.Label>\n            <Form.Control\n              type=\"number\"\n              defaultValue={this.props.learningRate}\n              onChange={this.onChangeLearningRate.bind(this)} />\n          </Form.Group>\n          <Form.Group as={Col}>\n            <Form.Label>Learning Limit</Form.Label>\n            <Form.Control\n              type=\"number\"\n              defaultValue={this.props.learningLimit}\n              onChange={this.onChangeLearningLimit.bind(this)} />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Col>\n            <Button\n              id=\"active-button\"\n              variant=\"outline-light\"\n              onClick={this.onClickActivate.bind(this)}>Activate</Button>\n          </Col>\n        </Form.Row>\n      </Form>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPanel);\n","import './App.css';\n\nimport React, { createRef } from 'react';\nimport { connect } from 'react-redux';\nimport Network from './components/Network';\nimport Loss from './components/Loss';\nimport Output from './components/Output';\nimport ControlPanel from './components/ControlPanel';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { AppState } from './reducers';\n\ntype Props = {\n  storeState: AppState;\n};\n\nclass App extends React.Component<Props> {\n\n  // 부모가 자식에게 접근하는 안티패턴. 추후 컨테이너 만들 때 액션으로 옮길 것\n  networkRef: any = createRef();\n  errorChartRef: any = createRef();\n  outputChartRef: any = createRef();\n\n  printResult () {\n    const { storeState: state } = this.props;\n    console.log('============================== Result ==================================');\n    console.log(`Loss: ${state.totalLoss}`);\n    console.log(`Inputs: [${state.inputs}]`);\n    console.log(`Outputs: [${state.learningResult}]`);\n    console.log(`Targets: [${state.targets}]`);\n    console.log('========================================================================');\n  }\n\n  componentDidMount () {\n    this.printResult();\n  }\n\n  componentDidUpdate () {\n    // 안티패턴\n    this.networkRef.current.init();\n    this.errorChartRef.current.init();\n    this.outputChartRef.current.init();\n    this.printResult();\n  }\n\n  render () {\n    const { storeState: state } = this.props;\n    return (\n      <div className=\"App\">\n        <Container fluid={true}>\n          <Row noGutters={true}>\n            <Col xs={12}>\n              <ControlPanel />\n            </Col>\n            <Col xs={12}>\n              <div id=\"network-display\" className=\"border-box\">\n                <h3>Network</h3>\n                <Network ref={this.networkRef} nodes={state.nodeGraphicData.nodes} links={state.nodeGraphicData.links} />\n              </div>\n            </Col>\n            <Col xs={12} xl={6}>\n              <div id=\"loss-rate-chart\" className=\"chart-wrapper border-box\">\n                <h3>Error Loss</h3>\n                <Loss ref={this.errorChartRef} losses={state.errorDataset} />\n              </div>\n            </Col>\n            <Col xs={12} xl={6}>\n              <div id=\"output-chart\" className=\"chart-wrapper border-box\">\n                <h3>Outputs</h3>\n                <Output ref={this.outputChartRef} outputs={state.outputDataset}/>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state: AppState): Props => {\n  return {\n    storeState: state,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './styles';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport bootstrapper from './lib/bootstrapper';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst state = store.getState();\nconst { targets, layerCount, nodePerLayer, learningRate, learningLimit } = state;\nbootstrapper({ targets, layerCount, nodePerLayer, learningRate, learningLimit });\n\nReactDOM.render((\n  <Provider store={ store }>\n    <App></App>\n  </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}